// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement()) //@db.UnsignedInt
  name      String    @db.VarChar(100)
  email     String    @db.VarChar(100)
  password  String    @db.VarChar(500)
  role      Int       @default(2) 
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatetAd DateTime  @default(now()) @db.Timestamp(0)

  @@map("users")
}



model Customer {
   id             Int     @default(autoincrement()) @id
   firstName      String @db.VarChar(100)
   lastName       String @db.VarChar(100)
   cpf            String @db.VarChar(15) @unique

   vehicles Vehicle[]
   appointment Appointment[]
  
  @@map("customers")
}

model VehicleType {
  id    Int    @default(autoincrement()) @id
  name  String @db.VarChar(50) @unique

  vehicles Vehicle[]

  @@map("vehicle_types")
}

model Vehicle {
  id                Int      @default(autoincrement()) @id

  customerId        Int      
  customer          Customer @relation(fields: [customerId], references: [id])

  vehicleTypeId     Int
  vehicleType       VehicleType @relation(fields: [vehicleTypeId], references: [id])

  plate             String    @db.VarChar(15) @unique
  brand             String?   @db.VarChar(100)
  model             String?   @db.VarChar(100)
  year              Int?
  
  @@map("vehicles")
}

model Appointment {
  id                Int      @default(autoincrement()) @id

  customerId        Int      
  customer          Customer @relation(fields: [customerId], references: [id])
  
  statusId          Int
  status            AppointmentStatus? @relation(fields: [statusId], references: [id])
  
  inspectionDate    DateTime 
  observation       String?

  @@map("appointments")
}

model AppointmentStatus {
  id            Int      @default(autoincrement()) @id
  name          String
  appointments  Appointment[]
  
  @@map("appointment_status")
}

model Service {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(255) @unique
  value         Float
  observation   String?   @db.VarChar(255)

  parts         Part[]        

  @@map("services")
}

model Part {
  id            Int      @id @default(autoincrement())

  serviceId     Int
  service       Service @relation(fields: [serviceId], references: [id])

  name          String   @db.VarChar(255) @unique
  supplier      String?  @db.VarChar(255)
  manufacturer  String?  @db.VarChar(255)
  barcode       String?  @db.VarChar(255)
  observation   String?  @db.VarChar(255)
  quantity      Int
  value         Float

  @@map("parts")
}


